/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.openbravo.pos.forms;

import com.alee.extended.time.ClockType;
import com.alee.extended.time.WebClock;
import com.alee.managers.notification.NotificationIcon;
import com.alee.managers.notification.NotificationManager;
import com.alee.managers.notification.WebNotification;
import com.openbravo.data.gui.JMessageDialog;
import com.openbravo.data.gui.MessageInf;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URL;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.JSONException;
import org.json.JSONObject;


/**
 *
 * @author Rishad
 */
public class LicenseActivation extends javax.swing.JFrame {
    
    private final String args[];
    private final String path = System.getProperty("user.home")+File.separator+"Areedpos";
    Properties prop = null;
    OutputStream output  = null;
    InputStream in = null;
    //private final String path = System.getProperty("user.dir")+File.separator+"licensing";


    /**
     * Creates new form LicenseActivation
     * @param args1
     */
    
    public LicenseActivation(String args1[]) {
        args = args1;
        try {
            prop = new Properties();
            if (new File(path + File.separator + "check.properties").exists() == false){
                System.out.println("in create");
                FileOutputStream createFile = new FileOutputStream(path + File.separator + "check.properties");
                System.out.println("Created check.properties file");
                prop.setProperty("check.statusCode", "FAIL");
                prop.setProperty("check.licenseKey", "");
                prop.store(createFile, "host settings");
            }
            in = new FileInputStream(path + File.separator + "check.properties");
            prop.load(in);
            String statusCode = prop.getProperty("check.statusCode");
            if(statusCode.equalsIgnoreCase("SUCCESS")){
                System.out.println("succcesssss");
                StartPOS.runApp(args);
            }else if(statusCode.equalsIgnoreCase("FAIL")){
                initComponents();
                this.setVisible(true);
            }else if(statusCode.equalsIgnoreCase("DEMO")){
                demoCode();
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(LicenseActivation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(LicenseActivation.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("License Activation"));

        jLabel1.setText("License Key");

        jButton1.setText("Activate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Run Demo Mode");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(14, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 116, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            String licenseKey = jTextField1.getText();
            java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("check");
            String url = bundle.getString("check.url");
            String skey = bundle.getString("check.skey");
            String rDomain = "";
            this.dispose();
            
            String httpUrl = "http://" + url + "/?secret_key=" + skey + "&slm_action=slm_activate&license_key=" + licenseKey + "&registered_domain=" + rDomain;
            System.out.println("urllll "+httpUrl);
            URL obj = new URL(httpUrl);
            HttpURLConnection con = (HttpURLConnection) obj.openConnection();
            // optional default is GET
            con.setRequestMethod("GET");
            //add request header
            con.setRequestProperty("User-Agent", "Mozilla/5.0");
            int responseCode = con.getResponseCode();
            System.out.println("\nSending 'GET' request to URL : " + url);
            System.out.println("Response Code : " + responseCode);
            BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
            String inputLine;
            StringBuffer response = new StringBuffer();
            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();
            //print in String
            System.out.println(response.toString());
            //Read JSON response and print
            JSONObject myResponse = new JSONObject(response.toString());
            System.out.println("result after Reading JSON Response");
            System.out.println("result- "+myResponse.getString("result"));
            System.out.println("Message- "+myResponse.getString("message"));
            
            if(myResponse.getString("result").equalsIgnoreCase("success")){
                prop.setProperty("check.statusCode", "SUCCESS");
                prop.setProperty("check.licenseKey", licenseKey);
                output = new FileOutputStream(path + File.separator + "check.properties");
                prop.store(output, "host settings");
                successCode();
             }else if(myResponse.getString("result").equalsIgnoreCase("error")){
                prop.setProperty("check.statusCode", "FAIL");
                output = new FileOutputStream(path + File.separator + "check.properties");
                prop.store(output, "host settings");
                failureCode();
             }
        } catch (MalformedURLException ex) {
            Logger.getLogger(LicenseActivation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
            Logger.getLogger(LicenseActivation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ProtocolException ex) {
            Logger.getLogger(LicenseActivation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(LicenseActivation.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            // TODO add your handling code here:
            prop.setProperty("check.statusCode", "DEMO");
            output = new FileOutputStream(path + File.separator + "check.properties");
            prop.store(output, "host settings");
            this.dispose();
            demoCode();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(LicenseActivation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(LicenseActivation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LicenseActivation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LicenseActivation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LicenseActivation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LicenseActivation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new LicenseActivation().setVisible(true);
            }
        });
    }
    
    public void successCode(){
            Notify("License Activated Successfully");             
            if (new File(path + File.separator + "demo").exists() == true){
                new File(path + File.separator + "demo").delete();
                System.out.println("deleted");
            }
            StartPOS.runApp(args);
    }
    public void failureCode(){
            JMessageDialog.showMessage(this, new MessageInf(MessageInf.VALID_LICENSE_NOT_FOUND,"Invalid License"));             
            System.exit(1);
    }
    
    public final void demoCode(){
         
            System.err.println("Entering Demo Mode");
            
                          boolean check = new File(path + File.separator + "demo").exists();
                          if (check == true){
                          System.out.println("exists");
                          try{
                                File file = new File(path + File.separator + "demo");
                                byte[] b = new byte[(int) file.length()];
                                FileInputStream fileInputStream = new FileInputStream(file);
                                fileInputStream.read(b);
                            
                                String readFromFile = new String(b);
                                fileInputStream.close();

                                DateTimeFormatter dateFormatter1 = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                            
                                LocalDate dateFromFile=LocalDate.parse(readFromFile,dateFormatter1);
                                System.out.println("Date after converting"+dateFromFile);
                                LocalDate today = LocalDate.now();
                                System.out.println("today"+today);

                                if(today.compareTo(dateFromFile)<0){
                                    Notify(AppLocal.getIntString("message.demo")); 
                                    StartPOS.runApp(args);
                                }else{
                                    JMessageDialog.showMessage(this, new MessageInf(MessageInf.VALID_LICENSE_NOT_FOUND,AppLocal.getIntString("message.nokey")));
                                    prop.setProperty("check.statusCode", "FAIL");
                                    output = new FileOutputStream(path + File.separator + "check.properties");
                                    prop.store(output, "host settings");
                                    System.exit(1);
                                }
                                }catch(FileNotFoundException ex){
                                    Logger.getLogger(StartPOS.class.getName()).log(Level.SEVERE, null, ex);
                                }catch(IOException ex){
                                    Logger.getLogger(StartPOS.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }else{
                            LocalDate date=LocalDate.now();
                            date = date.plusDays(30);
                            try (FileOutputStream fos = new FileOutputStream(path + File.separator + "demo")) {
                                System.out.println("Bytes"+date.toString().getBytes());
                                fos.write(date.toString().getBytes("UTF8"));
                                fos.close();
                                JMessageDialog.showMessage(this, new MessageInf(MessageInf.VALID_LICENSE_NOT_FOUND,AppLocal.getIntString("message.demo"))); 
                                StartPOS.runApp(args);
                            }catch(IOException ex){
                                Logger.getLogger(StartPOS.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                       
                       
    }
    public void Notify(String msg){
        final WebNotification notification = new WebNotification ();
        notification.setIcon ( NotificationIcon.information );
        notification.setDisplayTime ( 4000 );

        final WebClock clock = new WebClock ();
        clock.setClockType ( ClockType.timer );
        clock.setTimeLeft ( 5000 );
//        clock.setTimePattern ( clock );        
        notification.setContent ( msg );

        NotificationManager.showNotification ( notification );
        clock.start ();    
    }    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
